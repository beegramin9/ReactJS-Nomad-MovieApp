[{"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\index.js":"1","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\App.js":"2","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\Detail.js":"3","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\Main.js":"4","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\AboutTheProject.js":"5","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\themes\\default.js":"6","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalStyle.js":"7","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Header\\Header.js":"8","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Footer\\Footer.js":"9","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\DetailStyle.js":"10","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalComponents\\SectionStyle.js":"11","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalComponents\\LoadingStyle.js":"12","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalComponents\\LinkStyle.js":"13","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Movie\\Movie.js":"14","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Header\\HeaderStyle.js":"15","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\hooks\\useFetchMovieAndMakePagination.js":"16","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Footer\\FooterStyle.js":"17","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Movie\\MovieStyle.js":"18"},{"size":894,"mtime":1627633550276,"results":"19","hashOfConfig":"20"},{"size":1615,"mtime":1627633550254,"results":"21","hashOfConfig":"20"},{"size":4526,"mtime":1627633550284,"results":"22","hashOfConfig":"20"},{"size":6714,"mtime":1627633550292,"results":"23","hashOfConfig":"20"},{"size":954,"mtime":1627633550281,"results":"24","hashOfConfig":"20"},{"size":624,"mtime":1627633550304,"results":"25","hashOfConfig":"20"},{"size":769,"mtime":1627633550303,"results":"26","hashOfConfig":"20"},{"size":2021,"mtime":1627633550263,"results":"27","hashOfConfig":"20"},{"size":853,"mtime":1627633550257,"results":"28","hashOfConfig":"20"},{"size":3244,"mtime":1627633550286,"results":"29","hashOfConfig":"20"},{"size":3405,"mtime":1627633565956,"results":"30","hashOfConfig":"20"},{"size":465,"mtime":1627633550297,"results":"31","hashOfConfig":"20"},{"size":434,"mtime":1627633550295,"results":"32","hashOfConfig":"20"},{"size":1928,"mtime":1627633550269,"results":"33","hashOfConfig":"20"},{"size":1013,"mtime":1627633550267,"results":"34","hashOfConfig":"20"},{"size":2453,"mtime":1627633550274,"results":"35","hashOfConfig":"20"},{"size":598,"mtime":1627633550260,"results":"36","hashOfConfig":"20"},{"size":1757,"mtime":1627633550270,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v4geou",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\index.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\App.js",[],["80","81"],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\Detail.js",["82","83"],"import React from \"react\"\r\n\r\n\r\nclass Detail extends React.Component {\r\n    componentDidMount() {\r\n        const {location : {state}, history} = this.props\r\n        console.log(this.props);\r\n        /* Movies 컴포넌트에서 받아온 props\r\n        Detail 컴포넌트가 가지고 있는 속성으로 됨 */\r\n        if (!state) {\r\n            /* Movie 카드에서 들어온게 아니라면 Movie 카드 홈페이지로 되돌림\r\n            this.props에 있는 history의 push() 를 이용함. redirect 기능 */\r\n            history.push('/')\r\n        }\r\n    }\r\n    /* 렌더링이 되고 나서 componentDidMount()가 실행된다. \r\n    그래서 title을 받아온 다음에 새로고침을 하면 에러가 발생함\r\n    props를 안 받와왔으니 location도 없기 때문이다 */\r\n    render() {\r\n        const {location} = this.props\r\n        /* 그래서 여기서 경우를 나눠줘야 함 */\r\n        if (location.state) {\r\n            return <span>{location.state.title}</span>\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Detail","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\Main.js",["84"],"/* 라우팅: 메인 페이지를 보여주는 파일 */\r\nimport React from \"react\";\r\nimport './Main.css';\r\nimport Movie from '../components/Movie/Movie';\r\nimport { useFetchMovieAndMakePagination } from \"../hooks/useFetchMovieAndMakePagination\";\r\nimport { Section, MainCardSection, \r\n  IntroductionSection, ProfileImageSection, ProfileTextSection, ProfileTextTitle, ProfileTextContent,\r\n  MovieSection,  MovieListSection, PaginationSection } from \"../styles/GlobalComponents/SectionStyle\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport '../styles/GlobalComponents/PaginationStyle.css';\r\nimport { BounceLoader } from 'react-spinners';\r\nimport { LoadingWrapper } from '../styles/GlobalComponents/LoadingStyle';\r\n\r\n\r\nfunction Home() {\r\n  const URL = \"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"\r\n  const  {isLoading, currentMovieList, totalCountOfPage, changePage} = useFetchMovieAndMakePagination(URL)\r\n\r\n\r\n  // loading도 받아와서 loading일때는 부트스트랩 로딩 아이콘을 가져와서 쓸 수 있도록 해보자\r\n\r\n  return (\r\n    \r\n\r\n      <Section grid row>\r\n        <MainCardSection>\r\n          <IntroductionSection>\r\n            <ProfileImageSection>\r\n              <img className=\"profile-picture\" src={process.env.PUBLIC_URL + '/images/profile.jpg'} alt=\"picture of Wontae smiling\"/>\r\n            </ProfileImageSection> \r\n            <ProfileTextSection>\r\n              <ProfileTextTitle>Wontae's Movie Archive</ProfileTextTitle>\r\n              <ProfileTextContent>{'\\u00A0'}\r\n                                  Films are made to make us think, feel, laugh and cry.\r\n                                  Films take us to places where we cannot go and let us experience the things we cannot do in real life. </ProfileTextContent>\r\n            </ProfileTextSection>\r\n          </IntroductionSection>\r\n          {isLoading ?\r\n              <MovieSection>\r\n                <LoadingWrapper>\r\n                  <BounceLoader size={48} color='rgb(247, 247, 232)'/>\r\n                </LoadingWrapper>\r\n              </MovieSection>\r\n              :\r\n          <MovieSection>\r\n            <MovieListSection>\r\n              {currentMovieList.map(movie => {\r\n                return <Movie \r\n                key={movie.id} \r\n                id={movie.id} \r\n                year={movie.year} \r\n                title={movie.title} \r\n                summary={movie.summary} \r\n                genres={movie.genres} \r\n                poster={movie.medium_cover_image} />\r\n              })}\r\n            </MovieListSection>\r\n            <PaginationSection>\r\n              <ReactPaginate \r\n              previousLabel={\"<<\"}  \r\n              nextLabel={\">>\"}\r\n              pageCount={totalCountOfPage}\r\n              pageRangeDisplayed={2} /* 선택된 페이지 양옆 총 2개, 즉 각 1개씩 */\r\n              marginPagesDisplayed={1} /* 양끝 1개씩, 즉 최초와 최후는 항상 보이게 */\r\n              breakLabel={'-'} \r\n              onPageChange={changePage}\r\n              containerClassName={\"paginationButton\"}\r\n              previousLinkClassName={\"previousButton\"}\r\n              nextLinkClassName={\"nextButton\"}\r\n              disabledClassName={\"paginationDiabled\"}\r\n              activeClassName={\"paginationActive\"}/>\r\n            </PaginationSection>\r\n          </MovieSection>\r\n          } \r\n        </MainCardSection>\r\n      </Section>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n// class Home extends React.Component {\r\n//   state = {\r\n//     /* App이 실행(Mount)됨을 알리기 위해 isLoading이란 변수 */\r\n//     isLoading : true,\r\n//     /* 근데 state에 추가하지 않고 나중에 setState에서 추가해도 오류나지 않는다. */\r\n//     movies: []\r\n//   }\r\n//   /* 맨 처음 호출될 때\r\n//   render와 lifecylce은 다른 메소드니까 render 밖에 작성해야 함 */\r\n//   /* 함수 이런식으로 쓰는것도 ES6 */\r\n// \r\n//   /* 비동기. wait for axios! ES6라고 하는데 nodeJS랑 똑같네\r\n//   await 쓰려면 함수 앞에 async 써야 함 */\r\n//   getMovies = async () => {\r\n//     const URL = \"https://yts.mx/api/v2/list_movies.json?sort_by=rating \"\r\n//     // const movies = await axios.get(URL)\r\n//     // console.log(movies.data.data.movies);\r\n//     /* 원래 데이터 형태\r\n//     movies = {\r\n//       data: {data: {movies: {'const에 들어갈 원하는 정보'} } }\r\n//     } */\r\n// \r\n// \r\n//     const {data: {data: { movies }}} = await axios.get(URL)\r\n//     /* 원래는 {data: {data: { movies }}} = movies 인 거야\r\n//     원래는 movies : movies 인데 같으니까 movies으로만 써도 되는 것\r\n//      */\r\n//     console.log(movies);\r\n//     /* movies 안의 movie들을 state 안의 movie array에 넣을 것 */\r\n//     this.setState({movies : movies, isLoading : false})\r\n//     /* 앞에껀 state에 있는 movies array, 뒤에껀 url로 받아온 것 */\r\n//     /* {} 껍질 벗길 수 있다그랬지? 게다가 여긴 변수이름도 똑같으니 \r\n//     this.setState({{movies}}) 로 사용가능\r\n//     */\r\n//     console.log(this.state.movies);\r\n// \r\n//   }\r\n//   componentDidMount() {\r\n//     /* render가 처음 실행될 때 data를 fetch함. 보통 fetch()를 사용하긴 하는데\r\n//     axios() 사용할거임\r\n//     data 가져오는게 완료됐으면 그 데이터를 render할 거임 */\r\n//     this.getMovies()\r\n//   }\r\n// \r\n// \r\n//   render () {\r\n//     const {isLoading, movies} = this.state\r\n//     /* return 안의 괄호 안 코드는 JS 코드라 그랬지?\r\n//     근데 this.state 계속 써야하나? 귀찮노 */\r\n//     /* object 해체하는 방법임\r\n//     아마 state에 isLoading 하나밖에 없기 때문에 가능한 것으로 보임 \r\n//     변수를 설정하려면 당연히 return 밖에서 해야겠지 */\r\n// \r\n// \r\n//     /* html의 class와 JS의 class가 겹치기 때문에 className \r\n//     html의 for(label)과 JS의 for(반복문)이 겹치기 때문에 htmlfor*/\r\n//     return (\r\n//       <Section>\r\n// \r\n//       <section className=\"container\">\r\n//         {isLoading ? \r\n//         <div className=\"loader\">\r\n//           <span className=\"loader__txt\">Loading...</span>\r\n//         </div>:\r\n// \r\n// <div className=\"movies\">\r\n//           {movies.map(movie => {\r\n//             return <Movie \r\n//             /* key 요소가 있어야 한대 */\r\n//             key={movie.id} \r\n//             id={movie.id} \r\n//             year={movie.year} \r\n//             title={movie.title} \r\n//             summary={movie.summary} \r\n//             genres={movie.genres} \r\n//             poster={movie.medium_cover_image} />\r\n//           })}\r\n//         </div>\r\n//         }\r\n//       </section>\r\n//       </Section>\r\n//     )\r\n//   }  \r\n// }\r\n","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\AboutTheProject.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\themes\\default.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Header\\Header.js",["85"],"import React from \"react\";\r\nimport { HeaderContainer, Div1, Div2, Span} from \"./HeaderStyle\";\r\nimport { StyledLink } from \"../../styles/GlobalComponents/LinkStyle\";\r\nimport { RiMovie2Fill } from 'react-icons/ri';\r\n\r\n// 세로에 넣자\r\nfunction Header() {\r\n    /* Navigation을 만들기 위해 html의 <a>을 사용하면, <a>는 새로고침으로 새 페이지로 \r\n    이동하기 떄문에 이동할 때마다 React가 죽는다. 그렇기에 React의 Link를 사용한다 */\r\n    return (\r\n        <HeaderContainer>\r\n            <Div1>\r\n                <StyledLink to=\"/Home\">\r\n                    <a style={{ display: \"flex\", alignItems: \"center\", color:'white', marginBottom:\"20px\"}}>\r\n                        <RiMovie2Fill size=\"2rem\"/>\r\n                    </a>\r\n                </StyledLink>\r\n                <Span>MovieChive</Span>\r\n            </Div1>\r\n            <Div2>\r\n                <StyledLink to=\"/About\">\r\n                    <Span>About</Span>\r\n                </StyledLink>\r\n                <StyledLink to=\"/Home\">\r\n                    <Span>Home</Span>\r\n                </StyledLink>\r\n            </Div2>\r\n            {/* React 라우터에 의해 주어진 props를 이용해서\r\n            각각 Movie 카드를 클릭하면 Movie 디테일을 들고 다른 페이지로 갈 수 있도록 */}\r\n            {/* to의 path를 object로 교체할 수 있다. 주로 state에 추가 정보를 보낼 때 사용한다.\r\n            다시 말하면, jQuery로 /about&id=1?bid=2019처럼 정보가 보이지 않고 숨겨서 보낼 수 있다.*/}\r\n            {/* <StyledLink to={{\r\n                pathname: \"/movie\",\r\n                state: {\r\n                    fromNavigation : true\r\n                }\r\n            }}></StyledLink> */}\r\n        </HeaderContainer>\r\n        )\r\n\r\n    /* Link 태그가 들어간 컴포넌트는 HashRouter 밖에서 사용할 수 없다.\r\n    즉, Navigation 링크가 HashRouter 링크 밖으로 나가버리면 사용 불가능 */\r\n}\r\n\r\nexport default Header","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Footer\\Footer.js",["86"],"import React from \"react\";\r\nimport { } from \"./FooterStyle\";\r\nimport { StyledLink } from \"../../styles/GlobalComponents/LinkStyle\";\r\nimport { AiFillGithub, AiFillInstagram, AiFillLinkedin } from 'react-icons/ai';\r\nimport { FooterWrapper, SocialIcons } from \"./FooterStyle\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <FooterWrapper>\r\n            <SocialIcons href=\"https://github.com/beegramin9/ReactJS-Nomad-MovieApp\">\r\n                <AiFillGithub size=\"2rem\"/>\r\n            </SocialIcons>\r\n            <SocialIcons href=\"https://linkedin.com/in/wontae-choi-917259209\">\r\n              <AiFillLinkedin size=\"2rem\"/>\r\n            </SocialIcons>\r\n            <SocialIcons href=\"https://instagram.com/beestron9\">\r\n              <AiFillInstagram size=\"2rem\"/>\r\n            </SocialIcons>\r\n        </FooterWrapper>\r\n    )\r\n}\r\n\r\nexport default Footer;","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\routes\\DetailStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalComponents\\SectionStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalComponents\\LoadingStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\styles\\GlobalComponents\\LinkStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Movie\\Movie.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Header\\HeaderStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\hooks\\useFetchMovieAndMakePagination.js",["87"],"import { useEffect, useState } from \"react\";\r\nimport defaultAxios from \"axios\";\r\n\r\nexport const useFetchMovieAndMakePagination = (options, axiosInstance = defaultAxios) => {\r\n    const [totalMovieList, setTotalMovieList] = useState([]);\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    /* 처음으로 다시 돌아올 때 안되는건가 */\r\n    const [numOfMoviePerPage, setNumOfMoviePerPage] = useState(4);\r\n\r\n\r\n    useEffect( ()=>{\r\n        const fetchMovieData = async () => {\r\n            const response = await axiosInstance(options)\r\n            const {data: {data: {movies : totalMovieList}}}= response\r\n            setTotalMovieList(totalMovieList)\r\n            setIsLoading(false);\r\n        }\r\n        fetchMovieData();\r\n    }, []);\r\n\r\n\r\n    /* numOfMoviePerPage도 state니까, 매번 변하게 하려면 useState를 사용해야 함 */\r\n    /* 맨 첨부터 실행될때는 잘 안되네,, 결국 useEffect를 써야하나 */\r\n    useEffect( () => {\r\n        /* 이렇게하면 맨 처음일때, 즉 resize가 일어나지 않았을 때에는 \r\n        screenWidth에 관계없이 항상 기본값 4가 되고, resize가 일어났을 때 비로소 이렇게 된다\r\n        즉, eventListner 뿐만 아니라 맨 처음 상태에도 더해줘야 한다. */\r\n        const screenWidth  = window.innerWidth;\r\n        if (screenWidth < 730) {\r\n            setNumOfMoviePerPage(1);\r\n        } else if (screenWidth < 960) {\r\n            setNumOfMoviePerPage(2);\r\n        } else {\r\n            setNumOfMoviePerPage(4);\r\n        }\r\n        window.addEventListener('resize', () => {\r\n            const screenWidth  = window.innerWidth;\r\n            if (screenWidth < 730) {\r\n                setNumOfMoviePerPage(1);\r\n            } else if (screenWidth < 960) {\r\n                setNumOfMoviePerPage(2);\r\n            } else {\r\n                setNumOfMoviePerPage(4);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n\r\n    const numOfMovieDisplayed = pageNumber * numOfMoviePerPage\r\n    const currentMovieList = totalMovieList.slice(numOfMovieDisplayed, numOfMovieDisplayed+numOfMoviePerPage)\r\n    const totalCountOfPage = Math.ceil(totalMovieList.length / numOfMoviePerPage)\r\n\r\n    const changePage = ({selected}) => {\r\n        // ReactPaginate has a prop named Selected\r\n        setPageNumber(selected)\r\n    }\r\n\r\n    return {isLoading, currentMovieList, totalCountOfPage, changePage}\r\n} ","C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Footer\\FooterStyle.js",[],"C:\\Users\\wontae\\Workspace\\React\\Nomad-MovieApp\\src\\components\\Movie\\MovieStyle.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":11,"column":10,"nodeType":"94","messageId":"95","endLine":11,"endColumn":20},{"ruleId":"96","severity":1,"message":"97","line":44,"column":29,"nodeType":"98","endLine":44,"endColumn":148},{"ruleId":"96","severity":1,"message":"97","line":29,"column":15,"nodeType":"98","endLine":29,"endColumn":134},{"ruleId":"99","severity":1,"message":"100","line":14,"column":21,"nodeType":"98","endLine":14,"endColumn":109},{"ruleId":"92","severity":1,"message":"93","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":20,"column":8,"nodeType":"103","endLine":20,"endColumn":10,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'StyledLink' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'axiosInstance' and 'options'. Either include them or remove the dependency array. If 'axiosInstance' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},"Update the dependencies array to be: [axiosInstance, options]",{"range":"110","text":"111"},[774,776],"[axiosInstance, options]"]